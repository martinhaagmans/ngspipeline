__author__ = "Martin Haagmans (https://github.com/zaag)"
__license__ = "MIT"

from ngsscriptlibrary.mosaic import *

rule addmosaicdata:
    input:
        docfile=rules.depthofcoverage.output[0],
        bamfile=rules.markduplicates.output.bam,
        vcffile=rules.filtervariants.output[0]
    output:
        temp("gatkfiles/{sample}.mosaic2db.txt")
    message:
        "Mosaic 2 db"
    log:
        "logfiles/{sample}.Mosa2db.log"
    run:
        if not input_dict[wildcards.sample]['mozaiek']:
            shell("touch {output}")
        elif input_dict[wildcards.sample]['mozaiek']:
            add_sampledata_to_database(input.bamfile,
                                       input.vcffile,
                                       input.docfile,
                                       wildcards.sample,
                                       input_dict[wildcards.sample]['pakkettarget'],
                                       SOMOSADB)
            shell("touch {output}")



rule createmosaicoutput:
    input:
        expand(rules.addmosaicdata.output, sample=samples)
    output:
        png=temp("gatkfiles/{sample}.mosaic.png"),
        lc=temp("gatkfiles/{sample}.mosaic.out.txt")
    message:
        "Plot mosaic data"
    log:
        "logfiles/{sample}.MosaPlot.log"
    run:
        if not input_dict[wildcards.sample]['mozaiek']:
            shell("touch {output.png} && touch {output.table}")
        elif input_dict[wildcards.sample]['mozaiek']:
            bases = 'A C G T I D'.split()
            sdata, adata = get_data_to_plot(wildcards.sample, SOMOSADB)
            plot_data(sdata, adata, output.png)
            MDB = Mosaic(SOMOSADB)
            ref = MDB.get_reference_dict()
            lcvar = MDB.get_sample_low_coverage_var(wildcards.sample)
            lcd = MDB.parse_sample_low_coverage_var(lcvar)
            lcref = MDB.get_sample_low_coverage_ref(wildcards.sample)

            for locus in lcref:
                lcd[locus] = dict()
                for base in bases:
                    if base == ref[locus]:
                        lcd[locus][base] = 1
                    elif base == ref[locus]:
                        lcd[locus][base] = 0

            with open(output.lc, 'w') as f:
                header = 'locus\t{}\n'.format('\t'.join([base for base in bases]))
                f.write(header)
                for locus in sorted(lcd.keys()):
                    percentages = [str(lcd[locus][base]) if base in lcd[locus]
                                    else '.' for base in bases ]
                    out = '{}\t{}\n'.format(locus, '\t'.join(percentages))
                    f.write(out)
