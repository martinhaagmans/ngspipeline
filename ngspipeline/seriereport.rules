__author__ = "Martin Haagmans (https://github.com/martinhaagmans)"
__license__ = "MIT"


def write_list(listname, worksheet, row=0, col=0, skip=1, header=False,
               orientation='rows', format=None, formatheader=None):
    if header:
        worksheet.write(row, col, header, formatheader)
        row += skip

    if orientation == 'rows':
        [worksheet.write(row + i, col, ii, format)
         for i, ii in enumerate(listname)]
        row = row + len(listname) + 2

    elif orientation == 'cols':
        [worksheet.write(row, col + i, ii, format)
         for i, ii in enumerate(listname)]
        col = col + len(listname) + 2
        row += 1

    return (row, col)


def read_sangerfile(f):
    sample, extension = os.path.splitext(os.path.split(f)[1])
    df = pd.read_csv(f, sep='\t', header=None)
    df.columns = ['gen', 'chrom', '{}_noncallablestart'.format(sample),
                  '{}_noncallableend'.format(sample), 'targetstart',
                  'targetend']
    df.set_index(['chrom', 'targetstart', 'targetend', 'gen'], inplace=True)
    return df, sample.split('.')[0]


rule seriereport:
    input:
        samplereports = expand(rules.samplereport.output, sample=samples),
        sangers = expand(rules.getsangers.output.sangers, sample=samples),
        snpchecks = expand(rules.comparesnpcheckssample.output, sample=samples),
        dupsnps = rules.comparesnpchecksserie.output

    output:
        "output/MS{}_report.xlsx".format(serie)
    message:
        "Creating excel file for serie."
    run:
        import glob
        from ngsscriptlibrary.pipeline_db import MetricsDBReader
        db = METRICSDB
        writer = pd.ExcelWriter(output[0], engine='xlsxwriter')
        wb = writer.book
        wb.set_properties({
            'title': serie,
            'subject': 'MiSEQUENCING',
            'author': 'Martin Haagmans',
            'comments': 'Created with Python and XlsxWriter'})
        ws1 = wb.add_worksheet('Metrics')

        headerformat = wb.add_format()
        headerformat.set_font_size(16)

        underlined = wb.add_format()
        underlined.set_bottom()

        INFO = ['Sample', 'Pakket', 'TypeA', 'R1', 'R2', '% PF UQ',
                '% OnTarget', 'Mean', '% > 30x']

        row1, col1 = write_list(INFO, ws1, format=underlined,
                                orientation='cols')

        for dnr in samples:
            MR = MetricsDBReader(db, dnr, serie, input_dict[dnr]['capture'])
            pakket = input_dict[dnr]['pakket']
            panel = input_dict[dnr]['panel']
            if input_dict[dnr]['panel'] is None:
                perctargetcovered = 'nvt'
            elif input_dict[dnr]['panel'] is not None:
                perctargetcovered = MR.get_perc_target_covered(pakket)

            metrics_alignment = MR.get_alignmetrics_for_seriereport()
            metrics_hs = MR.get_hsmetrics_for_seriereport()
            picard_data = metrics_alignment + metrics_hs
            row1, col1 = write_list([dnr, pakket, panel]
                                    + picard_data
                                    + [perctargetcovered],
                                    ws1, row=row1, orientation='cols')

        df, failed = parse_sangers_for_seriereport(serie, db)

        if df.empty:
            ws2 = wb.add_worksheet('Sangers')
            row2, col2 = write_list(['Geen sangers'], ws2, orientation='cols')

        else:
            df.to_excel(writer, 'Sangers', header=False, index=False,
                         startrow=1, startcol=0)

            ws2 = writer.sheets['Sangers']
            ws2.set_column('F:Z', 20)
            row2, col2 = write_list(['gen', 'chrom', 'min', 'max', 'size', 'patients'], 
                                    ws2, row=0, orientation='cols', format=underlined)

        row1 += 2

        if failed:
            ws1.write(row1, 0,
                      'De volgende patienten hebben >50 sangers: {}'.format(' '.join(failed)))
            row1 += 1

        if os.stat(input.dupsnps[0]).st_size == 0:
            ws1.write(row1, 0, 'Alle NGS-SNPchecks zijn uniek')
            row1 += 1

        elif os.stat(input.dupsnps[0]).st_size != 0:
            with open(input.dupsnps[0]) as f:
                for line in f:
                    ws1.write(row1, 0,
                              'De volgende patienten hebben dezelfde SNPcheck: {}'.format(line.strip()))
                    row1 += 1
        # row1 += 2
        notaqman = list()
        taqmanerror = list()

        for fn in input.snpchecks:
            count = 0
            sample_name = os.path.split(fn)[1].split('.')[0]

            if os.stat(fn).st_size == 0:
                notaqman.append(sample_name)
                continue

            with open (fn) as f:
                for line in f:
                    if 'NoTaqMan' in line :
                        count += 1
                    elif 'ERROR' in line:
                        if sample_name not in taqmanerror:
                            taqmanerror.append(sample_name)
            if count > 2:
                notaqman.append(sample_name)

        if len(notaqman) > 0:
            ws1.write(row1, 0, 'De volgende patienten hebben onvoldoende TaqMan calls: {}'.format(' '.join(notaqman)))
            row1 += 1

        if len(taqmanerror) > 0:
            ws1.write(row1, 0, 'De volgende patienten hebben afwijkende TaqMan calls: {}'.format(' '.join(taqmanerror)))
            row1 += 1


        writer.sheets['Metrics'] = ws1
        pd.concat([pd.read_csv(f, sep='\t', header=None, index_col=['locus', 'rsid'],
                   names=['locus', 'rsid', 'ngs', 'sanger',
                          f.split('/')[-1].split('.')[0]])
                  .drop(['ngs', 'sanger'], axis=1) for f in input.snpchecks], axis=1
                  ).reset_index().transpose().reset_index().fillna('NoInput').to_excel(writer, 'Metrics',
                                                                                         startrow=row1 + 3,
                                                                                         startcol=0,
                                                                                         header=False,
                                                                                         index=False)

        ws1.set_column('A:Z', 18)

        wb.close()
